apiVersion: v1
kind: ConfigMap
metadata:
  name: jenkins-configuration
data:
  config.xml: |-
    <hudson>
      <disabledAdministrativeMonitors>
        <string>hudson.diagnosis.ReverseProxySetupMonitor</string>
        <string>hudson.diagnosis.TooManyJobsButNoView</string>
      </disabledAdministrativeMonitors>
      <version>2.102</version>
      <numExecutors>1</numExecutors>
      <mode>NORMAL</mode>
      <useSecurity>true</useSecurity>
      {{if eq .Values.security "github"}}
      <authorizationStrategy class="org.jenkinsci.plugins.GithubAuthorizationStrategy" plugin="github-oauth@0.25">
        <rootACL>
          <organizationNameList class="linked-list">
            {{ range .Values.github.githubOrgNames | split " " }}
            <string>{{ . }}</string>
            {{ end }}
          </organizationNameList>
          <adminUserNameList class="linked-list">
            {{ range .Values.github.admin_usernames | split " " }}
            <string>{{ . }}</string>
            {{ end }}
          </adminUserNameList>
          <authenticatedUserReadPermission>false</authenticatedUserReadPermission>
          <useRepositoryPermissions>false</useRepositoryPermissions>
          <authenticatedUserCreateJobPermission>false</authenticatedUserCreateJobPermission>
          <allowGithubWebHookPermission>false</allowGithubWebHookPermission>
          <allowCcTrayPermission>false</allowCcTrayPermission>
          <allowAnonymousReadPermission>false</allowAnonymousReadPermission>
          <allowAnonymousJobStatusPermission>false</allowAnonymousJobStatusPermission>
        </rootACL>
      </authorizationStrategy>
      <securityRealm class="org.jenkinsci.plugins.GithubSecurityRealm">
        <githubWebUri>https://github.com</githubWebUri>
        <githubApiUri>https://api.github.com</githubApiUri>
         <clientID>{{ .Values.github.githubClientId }}</clientID>
         <clientSecret>{{ .Values.github.githubClientKey }}</clientSecret>
        <oauthScopes>read:org,user:email</oauthScopes>
      </securityRealm>
      {{else if eq .Values.security "jenkins"}}
      <authorizationStrategy class="hudson.security.FullControlOnceLoggedInAuthorizationStrategy">
        <denyAnonymousReadAccess>false</denyAnonymousReadAccess>
      </authorizationStrategy>
      <securityRealm class="hudson.security.HudsonPrivateSecurityRealm">
        <disableSignup>false</disableSignup>
        <enableCaptcha>false</enableCaptcha>
      </securityRealm>
      {{else if eq .Values.security "ldap"}}
      <authorizationStrategy class="hudson.security.FullControlOnceLoggedInAuthorizationStrategy">
        <denyAnonymousReadAccess>false</denyAnonymousReadAccess>
      </authorizationStrategy>
      <securityRealm class="hudson.security.LDAPSecurityRealm" plugin="ldap@1.13">
        <server>{{.Values.ldapServer}}</server>
        <rootDN>{{.Values.rootDN}}</rootDN>
        <inhibitInferRootDN>false</inhibitInferRootDN>
        <userSearchBase>{{.Values.userSearchBase}}</userSearchBase>
        <userSearch>{{.Values.userSearchFilter}}</userSearch>
        <groupMembershipStrategy class="jenkins.security.plugins.ldap.FromGroupSearchLDAPGroupMembershipStrategy">
          <filter>{{.Values.groupMembershipFilter}}</filter>
        </groupMembershipStrategy>
        {{if .Values.ldap.managerDN}}
        <managerDN>{{.Values.ldap.managerDN}}</managerDN>
        {{end}}
        <managerPasswordSecret>{{.Values.ldap.managerDNPassword}}</managerPasswordSecret>
        <disableMailAddressResolver>false</disableMailAddressResolver>
        <displayNameAttributeName>displayname</displayNameAttributeName>
        <mailAddressAttributeName>mail</mailAddressAttributeName>
        <userIdStrategy class="jenkins.model.IdStrategy$CaseInsensitive"/>
        <groupIdStrategy class="jenkins.model.IdStrategy$CaseInsensitive"/>
      </securityRealm>
      {{end}}
      <disableRememberMe>false</disableRememberMe>
      <projectNamingStrategy class="jenkins.model.ProjectNamingStrategy$DefaultProjectNamingStrategy"/>
      <workspaceDir>${JENKINS_HOME}/workspace/${ITEM_FULLNAME}</workspaceDir>
      <buildsDir>${ITEM_ROOTDIR}/builds</buildsDir>
      <markupFormatter class="hudson.markup.EscapedMarkupFormatter"/>
      <jdks/>
      <viewsTabBar class="hudson.views.DefaultViewsTabBar"/>
      <myViewsTabBar class="hudson.views.DefaultMyViewsTabBar"/>
      <clouds>
        <org.csanchez.jenkins.plugins.kubernetes.KubernetesCloud plugin="kubernetes@1.1.3">
          <name>kubernetes</name>
          <defaultsProviderTemplate></defaultsProviderTemplate>
          <templates/>
          <serverUrl>https://kubernetes.default.svc.cluster.local</serverUrl>
          <skipTlsVerify>true</skipTlsVerify>
          <namespace>{{ .Release.Namespace }}</namespace>
          <jenkinsUrl>http://jenkins:{{ .Values.master.port }}</jenkinsUrl>
          <jenkinsTunnel>jenkins:{{ .Values.agent.port }}</jenkinsTunnel>
          <credentialsId>jenkins-service-account</credentialsId>
          <containerCap>50</containerCap>
          <connectTimeout>5</connectTimeout>
          <retentionTimeout>5</retentionTimeout>
          <readTimeout>15</readTimeout>
          <maxRequestsPerHost>{{ .Values.agent.requestsPerHost }}</maxRequestsPerHost>
        </org.csanchez.jenkins.plugins.kubernetes.KubernetesCloud>
      </clouds>
      <quietPeriod>5</quietPeriod>
      <scmCheckoutRetryCount>0</scmCheckoutRetryCount>
      <views>
        <hudson.model.AllView>
          <owner class="hudson" reference="../../.."/>
          <name>All</name>
          <filterExecutors>false</filterExecutors>
          <filterQueue>false</filterQueue>
          <properties class="hudson.model.View$PropertyList"/>
        </hudson.model.AllView>
      </views>
      <primaryView>All</primaryView>
      <slaveAgentPort>50000</slaveAgentPort>
      <disabledAgentProtocols>
        <string>JNLP-connect</string>
        <string>JNLP2-connect</string>
      </disabledAgentProtocols>
      <label>jobdsl</label>
      <crumbIssuer class="hudson.security.csrf.DefaultCrumbIssuer">
        <excludeClientIPFromCrumb>true</excludeClientIPFromCrumb>
      </crumbIssuer>
      <nodeProperties/>
      <globalNodeProperties>
        <hudson.slaves.EnvironmentVariablesNodeProperty>
          <envVars serialization="custom">
            <unserializable-parents/>
            <tree-map>
              <default>
                <comparator class="hudson.util.CaseInsensitiveComparator"/>
              </default>
              <int>6</int>
              <string>HELM_GKE_SERVICE_ACCOUNT</string>
              <string>{{ .Values.helm.svcAccountId }}</string>
              <string>MAIN_GKE_SERVICE_ACCOUNT</string>
              <string>{{ .Values.gke.svcAccountId }}</string>
              <string>UNIQUE_JENKINS_ID</string>
              <string>{{ .Release.Name }}</string>
              <string>GKE_CLUSTER_NAME</string>
              <string>{{ .Values.gke.clusterName }}</string>
              <string>GKE_PRIMARY_ZONE</string>
              <string>{{ .Values.gke.clusterPrimaryZone }}</string>
              <string>GKE_PROJECT_NAME</string>
              <string>{{ .Values.gke.gkeProject }}</string>
            </tree-map>
          </envVars>
        </hudson.slaves.EnvironmentVariablesNodeProperty>
      </globalNodeProperties>
      <noUsageStatistics>true</noUsageStatistics>
    </hudson>
  {{ if eq .Values.security "jenkins" }}
  admin-config.xml: |-
    <?xml version='1.0' encoding='UTF-8'?>
    <user>
      <fullName>Administrator</fullName>
      <properties>
        <jenkins.security.ApiTokenProperty>
          <apiToken></apiToken>
        </jenkins.security.ApiTokenProperty>
        <com.cloudbees.plugins.credentials.UserCredentialsProvider_-UserCredentialsProperty plugin="credentials@2.1.10">
          <domainCredentialsMap class="hudson.util.CopyOnWriteMap$Hash"/>
        </com.cloudbees.plugins.credentials.UserCredentialsProvider_-UserCredentialsProperty>
        <hudson.model.MyViewsProperty>
          <views>
            <hudson.model.AllView>
              <owner class="hudson.model.MyViewsProperty" reference="../../.."/>
              <name>All</name>
              <filterExecutors>false</filterExecutors>
              <filterQueue>false</filterQueue>
              <properties class="hudson.model.View$PropertyList"/>
            </hudson.model.AllView>
          </views>
        </hudson.model.MyViewsProperty>
        <hudson.model.PaneStatusProperties>
          <collapsed/>
        </hudson.model.PaneStatusProperties>
        <hudson.search.UserSearchProperty>
          <insensitiveSearch>false</insensitiveSearch>
        </hudson.search.UserSearchProperty>
        <hudson.security.HudsonPrivateSecurityRealm_-Details>
          <passwordHash>$SALTED_SHASUM</passwordHash>
        </hudson.security.HudsonPrivateSecurityRealm_-Details>
        <hudson.tasks.Mailer_-UserProperty plugin="mailer@1.18">
          <emailAddress>{{ .Values.adminEmail }}</emailAddress>
        </hudson.tasks.Mailer_-UserProperty>
      </properties>
    </user>
  {{ end }}
  github-plugin-configuration.xml: |-
    <?xml version='1.0' encoding='UTF-8'?>
    <github-plugin-configuration plugin="github@1.28.1">
      <configs>
        <github-server-config>
          <apiUrl>https://api.github.com</apiUrl>
          {{if eq .Values.security "github"}}
          <manageHooks>true</manageHooks>
          {{else}}
          <manageHooks>false</manageHooks>
          {{end}}
          <credentialsId>github-access</credentialsId>
          <clientCacheSize>20</clientCacheSize>
        </github-server-config>
      </configs>
      {{ if .Values.jenkinsHookUrl }}
      <hookUrl>{{ .Values.jenkinsHookUrl }}</hookUrl>
      {{ end }}
      <hookSecretConfig>
        <credentialsId>github-access</credentialsId>
      </hookSecretConfig>
    </github-plugin-configuration> 
  scriptApproval.xml: |-
    <?xml version='1.0' encoding='UTF-8'?>
    <scriptApproval plugin="script-security@1.40">
      <approvedScriptHashes>
        <string>1abcc62d17dae38c1b786c20ab8bc2a4a2edc291</string>
        <string>41b754a597fc671abc48b22a9002a37a595441bb</string>
        <string>48653c17af46adfc3c39a90d9f8c2833ad141e56</string>
        <string>6a401bc0a59f634f49084195078b6efc5171efac</string>
        <string>a324c6b953f03b529fe30b3b01ee840aec5f56dc</string>
        <string>bab7581955ec38541b43d57b7d766f3e377eae1c</string>
        <string>dc1c5d2fdd763978dc2a63d8f9558a68174cb79f</string>
        <string>e8bb047ef1efe6c90c896b0df66b378c4cdd2a0d</string>
        <string>fd236dedb591d7396b30e265554ea1210fe726f1</string>
      </approvedScriptHashes>
      <approvedSignatures>
        <string>method groovy.json.JsonSlurperClassic parseText java.lang.String</string>
        <string>method groovy.lang.GroovyObject getProperty java.lang.String</string>
        <string>method groovy.lang.GroovyObject setProperty java.lang.String java.lang.Object</string>
        <string>method hudson.model.Actionable getAction java.lang.Class</string>
        <string>method hudson.model.Cause getShortDescription</string>
        <string>method hudson.model.Job getLastBuild</string>
        <string>method hudson.model.Run getCause java.lang.Class</string>
        <string>method hudson.model.Run getCauses</string>
        <string>method jenkins.model.Jenkins getItemByFullName java.lang.String</string>
        <string>method org.jenkinsci.plugins.workflow.support.actions.EnvironmentAction getEnvironment</string>
        <string>method org.jenkinsci.plugins.workflow.support.steps.build.RunWrapper getRawBuild</string>
        <string>method org.yaml.snakeyaml.DumperOptions setDefaultFlowStyle org.yaml.snakeyaml.DumperOptions$FlowStyle</string>
        <string>method org.yaml.snakeyaml.DumperOptions setPrettyFlow boolean</string>
        <string>method org.yaml.snakeyaml.Yaml dump java.lang.Object</string>
        <string>method org.yaml.snakeyaml.Yaml load java.lang.String</string>
        <string>new groovy.json.JsonSlurperClassic</string>
        <string>new hudson.EnvVars java.lang.String[]</string>
        <string>new java.lang.Exception java.lang.String</string>
        <string>new java.util.ArrayList java.util.Collection</string>
        <string>new java.util.HashMap java.util.Map</string>
        <string>new org.yaml.snakeyaml.DumperOptions</string>
        <string>new org.yaml.snakeyaml.Yaml</string>
        <string>new org.yaml.snakeyaml.Yaml org.yaml.snakeyaml.DumperOptions</string>
        <string>staticField hudson.model.Result SUCCESS</string>
        <string>staticField org.yaml.snakeyaml.DumperOptions$FlowStyle BLOCK</string>
        <string>staticMethod hudson.model.Hudson getInstance</string>
        <string>staticMethod java.lang.Thread currentThread</string>
        <string>staticMethod java.util.regex.Pattern quote java.lang.String</string>
        <string>staticMethod jenkins.model.Jenkins getInstance</string>
        <string>staticMethod org.codehaus.groovy.runtime.DefaultGroovyMethods addAll java.util.Collection java.lang.Object[]</string>
        <string>staticMethod org.codehaus.groovy.runtime.DefaultGroovyMethods getProperties java.lang.Object</string>
        <string>staticMethod org.codehaus.groovy.runtime.DefaultGroovyMethods inject java.util.Map java.lang.Object groovy.lang.Closure</string>
        <string>staticMethod org.codehaus.groovy.runtime.DefaultGroovyMethods invokeMethod java.lang.Object java.lang.String java.lang.Object</string>
        <string>staticMethod org.codehaus.groovy.runtime.DefaultGroovyMethods leftShift java.util.Map java.util.Map</string>
        <string>staticMethod org.codehaus.groovy.runtime.DefaultGroovyMethods println java.lang.Object java.lang.Object</string>
        <string>staticMethod org.codehaus.groovy.runtime.DefaultGroovyMethods toBoolean java.lang.Boolean</string>
        <string>staticMethod org.codehaus.groovy.runtime.ScriptBytecodeAdapter createRange java.lang.Object java.lang.Object boolean</string>
      </approvedSignatures>
      <aclApprovedSignatures/>
      <approvedClasspathEntries/>
      <pendingScripts/>
      <pendingSignatures/>
      <pendingClasspathEntries/>
    </scriptApproval>
  jenkins.plugins.slack.SlackNotifier.xml: |-
    <?xml version='1.0' encoding='UTF-8'?>
    <jenkins.plugins.slack.SlackNotifier_-DescriptorImpl plugin="slack@2.3">
      <teamDomain>{{ .Values.slack.slackDomain }}</teamDomain>
      <token></token>
      <tokenCredentialId>slack-token</tokenCredentialId>
      <room>{{ .Values.slack.slackRoom }}</room>
    </jenkins.plugins.slack.SlackNotifier_-DescriptorImpl>  
  jenkins.model.JenkinsLocationConfiguration.xml: |-
    <?xml version='1.0' encoding='UTF-8'?>
    <jenkins.model.JenkinsLocationConfiguration>
      <adminAddress>{{.Values.adminEmail}}</adminAddress>
      <jenkinsUrl>https://{{.Values.jenkinsUrl}}/</jenkinsUrl>
    </jenkins.model.JenkinsLocationConfiguration>    
  credentials.xml: |-
    <?xml version='1.0' encoding='UTF-8'?>
    <com.cloudbees.plugins.credentials.SystemCredentialsProvider plugin="credentials@2.1.16">
      <domainCredentialsMap class="hudson.util.CopyOnWriteMap$Hash">
        <entry>
          <com.cloudbees.plugins.credentials.domains.Domain>
            <specifications/>
          </com.cloudbees.plugins.credentials.domains.Domain>
          <java.util.concurrent.CopyOnWriteArrayList>
            <org.csanchez.jenkins.plugins.kubernetes.ServiceAccountCredential plugin="kubernetes@0.10">
              <scope>GLOBAL</scope>
              <id>jenkins-service-account</id>
              <description>jenkins service account</description>
            </org.csanchez.jenkins.plugins.kubernetes.ServiceAccountCredential>
            <com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey plugin="ssh-credentials@1.12">
              <scope>GLOBAL</scope>
              <id>ssh-key</id>
              <description></description>
              <username>ssh_key</username>
              <passphrase>AwWB1DmD5ohRV1AnKdVv8w==</passphrase>
              <privateKeySource class="com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey$FileOnMasterPrivateKeySource">
                <privateKeyFile>/etc/jenkins-ssh-keys/ssh-privatekey</privateKeyFile>
              </privateKeySource>
            </com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey>
            <org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl plugin="plain-credentials@1.3">
              <scope>GLOBAL</scope>
              <id>slack-token</id>
              <description>slack api token</description>
              <secret>{{ .Values.slack.slackApiToken }}</secret>
            </org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl>
            <com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl>
              <scope>GLOBAL</scope>
              <id>repo-scan-access</id>
              <description></description>
              <username>{{ .Values.github.githubUserName }}</username>
              <password>{{ .Values.github.githubAccessToken }}</password>
            </com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl>
          </java.util.concurrent.CopyOnWriteArrayList>
        </entry>
        <entry>
          <com.cloudbees.plugins.credentials.domains.Domain>
            <name>api.github.com</name>
            <description>GitHub domain (autogenerated)</description>
            <specifications>
              <com.cloudbees.plugins.credentials.domains.SchemeSpecification>
                <schemes class="linked-hash-set">
                  <string>https</string>
                </schemes>
              </com.cloudbees.plugins.credentials.domains.SchemeSpecification>
              <com.cloudbees.plugins.credentials.domains.HostnameSpecification>
                <includes>api.github.com</includes>
              </com.cloudbees.plugins.credentials.domains.HostnameSpecification>
            </specifications>
          </com.cloudbees.plugins.credentials.domains.Domain>
          <list>
            <org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl plugin="plain-credentials@1.3">
              <scope>GLOBAL</scope>
              <id>github-access</id>
              <description></description>
              <secret>{{ .Values.github.githubAccessToken }}</secret>
            </org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl>
          </list>
        </entry>
      </domainCredentialsMap>
    </com.cloudbees.plugins.credentials.SystemCredentialsProvider>   
  render-jenkins-config.sh: |-
    #!/bin/bash

    # copy files to jenkins home folder
    cp -f /var/jenkins_config/config.xml /var/jenkins_home
    cp -f /var/jenkins_config/credentials.xml /var/jenkins_home
    cp -f /var/jenkins_config/jenkins.plugins.slack.SlackNotifier.xml /var/jenkins_home
    cp -f /var/jenkins_config/jenkins.model.JenkinsLocationConfiguration.xml /var/jenkins_home
    cp -f /var/jenkins_config/github-plugin-configuration.xml /var/jenkins_home
    cp -f /var/jenkins_config/scriptApproval.xml /var/jenkins_home

    {{ if eq .Values.security "jenkins" }}
    # create admin user folder
    mkdir -p /var/jenkins_home/users/admin
    cp -f /var/jenkins_config/admin-config.xml /var/jenkins_home/users/admin/config.xml
    {{ end }}

    # create ssh config
    mkdir -p /root/.ssh
    cp -f /var/jenkins_config/config /root/.ssh

    # replace tokens
    {{ if eq .Values.security "jenkins" }}
    sed -i -e "s/\$SALTED_SHASUM/"{{ .Values.adminUserSalt }}:$(printf "{{ .Values.adminPassword }}{ {{ .Values.adminUserSalt }} }" | tr -d ' ' | shasum -a 256 | cut -d " " -f 1)"/" /var/jenkins_home/users/admin/config.xml
    {{ end }}
  create-k8s-job.sh: |-
    #!/bin/bash
    kubectl delete -f /var/jenkins_config/create-jobs.yaml || true
    kubectl create -f /var/jenkins_config/create-jobs.yaml
  build-jenkins-jobs.sh: |-
    #!/bin/bash

    # create ssh config
    echo "Setting up ssh keys"
    mkdir -p /root/.ssh
    cp -f /var/jenkins_config/config /root/.ssh

    echo "Cloning job repository"
    rm -rf /etc/jenkins_jobs/*
    git clone {{.Values.jobsRepo}} /etc/jenkins_jobs

    echo "Waiting for Jenkins to be available"
    {{ if eq .Values.security "github" }}
    while [[ $(curl -s -w "%{http_code}" -u {{ .Values.github.githubUserName }}:{{ .Values.github.githubAccessToken }} http://${JENKINS_SERVICE_HOST}:${JENKINS_SERVICE_PORT} -o /dev/null) != "200" ]]; do sleep 5; done
    {{ else }}
    while [[ $(curl -s -w "%{http_code}" http://${JENKINS_SERVICE_HOST}:${JENKINS_SERVICE_PORT} -o /dev/null) != "200" ]]; do sleep 5; done
    {{ end }}

    echo "Getting admin token"
    {{ if eq .Values.security "github" }}
    JENKINS_API_TOKEN=$(curl --silent --basic http://{{ .Values.github.githubUserName }}:{{ .Values.github.githubAccessToken }}@${JENKINS_SERVICE_HOST}:${JENKINS_SERVICE_PORT}/me/configure | hxselect '#apiToken' | sed 's/.*value="\([^"]*\)".*/\1\n/g')
    {{ else }}
    JENKINS_API_TOKEN=$(curl --silent --basic http://{{ .Values.adminUser }}:{{ .Values.adminPassword }}@${JENKINS_SERVICE_HOST}:${JENKINS_SERVICE_PORT}/me/configure | hxselect '#apiToken' | sed 's/.*value="\([^"]*\)".*/\1\n/g')
    {{ end }}

    echo "Creating seed job"
    cd /etc/jenkins_jobs
    {{ if eq .Values.security "github" }}
    /etc/jenkins_jobs/gradlew rest -Dpattern=jobs/seed.groovy -DbaseUrl=http://${JENKINS_SERVICE_HOST}:${JENKINS_SERVICE_PORT}/api -Dusername={{ .Values.github.githubUserName }} -Dpassword={{ .Values.github.githubAccessToken }}
    {{ else }}
    /etc/jenkins_jobs/gradlew rest -Dpattern=jobs/seed.groovy -DbaseUrl=http://${JENKINS_SERVICE_HOST}:${JENKINS_SERVICE_PORT}/api -Dusername={{ .Values.adminUser }} -Dpassword={{ .Values.adminPassword }}
    {{ end }}

    echo "Running seed job"
    {{ if eq .Values.security "github" }}
    curl -X POST http://{{ .Values.github.githubUserName }}:${JENKINS_API_TOKEN}@${JENKINS_SERVICE_HOST}:${JENKINS_SERVICE_PORT}/job/seed/build?token={{ .Values.seedJobToken }}
    {{ else }}
    curl -X POST http://{{ .Values.adminUser }}:${JENKINS_API_TOKEN}@${JENKINS_SERVICE_HOST}:${JENKINS_SERVICE_PORT}/job/seed/build?token={{ .Values.seedJobToken }}
    {{ end }}
  config: |-
    IdentityFile            /etc/jenkins-ssh-keys/ssh-privatekey
    IdentitiesOnly          yes 
    StrictHostKeyChecking   no
  create-jobs.yaml: |-
    apiVersion: batch/v1
    kind: Job
    metadata:
      name: {{ template "jenkinsJobName" . }}
      labels:
        heritage: {{.Release.Service | quote }}
        release: {{.Release.Name | quote }}
        chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
        component: "jenkins"
      annotations:
        "helm.sh/created": {{.Release.Time.Seconds | quote }}
    spec:
      activeDeadlineSeconds: 600
      completions: 1
      parallelism: 1
      template:
        metadata:
          name: {{ template "jenkinsJobName" . }}
          labels:
            heritage: {{ .Release.Service | quote }}
            release: {{ .Release.Name | quote }}
            chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
        spec:
          restartPolicy: "Never"
          containers:
            - name: {{ template "jenkinsJobName" . }}
              image: "{{ .Values.images.jenkinsgradle }}"
              imagePullPolicy: Always
              command: 
                - "/bin/bash"
                - "-ec"
                - "/var/jenkins_config/build-jenkins-jobs.sh"
              volumeMounts:
                - name: job-data
                  mountPath: /etc/jenkins_jobs
                - name: jenkinshome
                  mountPath: /var/jenkins_home
                - name: jenkins-config
                  mountPath: /var/jenkins_config
                  readOnly: false
                - name: jenkins-ssh-keys
                  mountPath: /etc/jenkins-ssh-keys
                  readOnly: true
          volumes:
            - name: job-data
              emptyDir: {}
            - name: jenkinshome
              emptyDir: {}
            - name: jenkins-config
              configMap:
                name: jenkins-configuration
                defaultMode: 0775
            - name: jenkins-ssh-keys
              secret:
                secretName: jenkins-ssh-{{ .Release.Name }}
                defaultMode: 0400